{"version":3,"file":"ApiRequestParser.js","sourceRoot":"","sources":["../../../src/request/ApiRequestParser.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeDefinition} from \"../edge/ApiEdgeDefinition\";\nimport {ApiEdgeRelation} from \"../relations/ApiEdgeRelation\";\nimport {ApiRequestPath, RelatedFieldPathSegment, EntryPathSegment, EdgePathSegment, ApiRequest} from \"./ApiRequest\";\nimport {OneToOneRelation} from \"../relations/OneToOneRelation\";\nimport {OneToManyRelation} from \"../relations/OneToManyRelation\";\nimport {ApiEdgeError} from \"../query/ApiEdgeError\";\nimport {Api} from \"../Api\";\n\nexport class ApiRequestPathParser {\n    api: Api;\n\n    constructor(api: Api) {\n        this.api = api;\n    }\n\n    private findEdgeByName(name: string|null|undefined): ApiEdgeDefinition {\n        return this.api.edges.find((edge: ApiEdgeDefinition) => edge.pluralName === name);\n    }\n\n    private findRelationByName(edge: ApiEdgeDefinition, name: string|null|undefined): ApiEdgeRelation {\n        return edge.relations.find((rel: ApiEdgeRelation) => rel.name === name);\n    }\n\n    parse(segments: string[]): ApiRequestPath {\n        let requestPath = new ApiRequestPath();\n\n        let lastEdge: ApiEdgeDefinition|null = null,\n            lastRelation: ApiEdgeRelation|null = null,\n            wasEntry = false;\n        while(segments.length) {\n            let segment = segments.shift();\n\n            if(lastEdge) {\n                //TODO: Add support for methods.\n\n                let relation: ApiEdgeRelation = this.findRelationByName(lastEdge, segment);\n                if(relation) {\n                    if(relation instanceof OneToOneRelation) {\n                        requestPath.add(new RelatedFieldPathSegment(lastEdge, relation));\n                        lastEdge = (relation as OneToOneRelation).to;\n                        lastRelation = relation;\n                        wasEntry = true;\n                    }\n                    else if(wasEntry && relation instanceof OneToManyRelation) {\n                        lastEdge = (relation as OneToManyRelation).to;\n                        lastRelation = relation;\n                        wasEntry = false;\n                    }\n                    else {\n                        throw new ApiEdgeError(400, \"Unsupported Relation: \" + segment);\n                    }\n                }\n                else if(!wasEntry) {\n                    requestPath.add(new EntryPathSegment(lastEdge, \"\"+segment, lastRelation));\n                    wasEntry = true;\n                }\n                else {\n                    throw new ApiEdgeError(400, `Missing Relation: ${lastEdge.name} -> ${segment}`);\n                }\n            }\n            else {\n                let edge = this.findEdgeByName(segment);\n\n                if(edge) {\n                    lastEdge = edge;\n                    wasEntry = false;\n                }\n                else {\n                    throw new ApiEdgeError(400,\"Missing Edge: \" + segment);\n                }\n            }\n        }\n\n        if(lastEdge && !wasEntry) {\n            requestPath.add(new EdgePathSegment(lastEdge, lastRelation));\n            lastEdge = null;\n        }\n\n        return requestPath\n    }\n\n}\n\nexport class ApiRequestParser {\n    api: Api;\n    private pathParser: ApiRequestPathParser;\n\n    constructor(api: Api) {\n        this.api = api;\n        this.pathParser = new ApiRequestPathParser(api);\n    }\n\n    parse(segments: string[]): ApiRequest {\n        let request = new ApiRequest();\n        request.path = this.pathParser.parse(segments);\n        return request;\n    }\n}\n"]}