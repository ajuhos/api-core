{"version":3,"file":"Api.js","sourceRoot":"","sources":["../../src/Api.ts"],"names":[],"mappings":";AACA,iCAA+B,4BAA4B,CAAC,CAAA;AAC5D,gCAA8B,yBAAyB,CAAC,CAAA;AAKxD;IASI,aAAY,OAAe;QAT/B,iBAmCC;QA1BgC,eAA6B;aAA7B,WAA6B,CAA7B,sBAA6B,CAA7B,IAA6B;YAA7B,8BAA6B;;QAJ1D,UAAK,GAAwB,EAAE,CAAC;QAWhC,iBAAY,GAAG,UAAC,YAAsB;YAClC,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAC3C,CAAC,CAAC;QAEF,eAAU,GAAG,UAAC,OAAmB;YAC7B,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC;QAZE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,IAAI,mCAAgB,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,IAAI,iCAAe,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAUD,kBAAI,GAAJ,UAAK,IAAuB;QACxB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAA;IACf,CAAC;;IAED,sBAAQ,GAAR,UAAS,QAAyB;QAC9B,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrC,MAAM,CAAC,IAAI,CAAA;IACf,CAAC;IAhCM,oBAAgB,GAAW,IAAI,CAAC;IAChC,kBAAc,GAAW,IAAI,CAAC;IAiCzC,UAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,WAAG,MAmCf,CAAA","sourcesContent":["import {ApiEdgeDefinition} from \"./edge/ApiEdgeDefinition\";\nimport {ApiRequestParser} from \"./request/ApiRequestParser\";\nimport {ApiQueryBuilder} from \"./query/ApiQueryBuilder\";\nimport {ApiRequest} from \"./request/ApiRequest\";\nimport {ApiQuery} from \"./query/ApiQuery\";\nimport {ApiEdgeRelation} from \"./relations/ApiEdgeRelation\";\n\nexport class Api {\n    static defaultIdPostfix: string = \"Id\";\n    static defaultIdField: string = \"id\";\n\n    version: string;\n    edges: ApiEdgeDefinition[] = [];\n    private parser: ApiRequestParser;\n    private queryBuilder: ApiQueryBuilder;\n\n    constructor(version: string, ...edges: ApiEdgeDefinition[]) {\n        this.version = version;\n        this.edges = edges;\n        this.parser = new ApiRequestParser(this);\n        this.queryBuilder = new ApiQueryBuilder(this);\n    }\n\n    parseRequest = (requestParts: string[]) => {\n        return this.parser.parse(requestParts);\n    };\n\n    buildQuery = (request: ApiRequest): ApiQuery => {\n        return this.queryBuilder.build(request);\n    };\n\n    edge(edge: ApiEdgeDefinition) {\n        this.edges.push(edge);\n        return this\n    };\n\n    relation(relation: ApiEdgeRelation) {\n        relation.from.relations.push(relation);\n        relation.to.relations.push(relation);\n        return this\n    }\n\n}\n"]}