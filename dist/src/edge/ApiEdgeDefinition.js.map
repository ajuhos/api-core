{"version":3,"file":"ApiEdgeDefinition.js","sourceRoot":"","sources":["../../../src/edge/ApiEdgeDefinition.ts"],"names":[],"mappings":";AAIA,8BAAgD,iBAAiB,CAAC,CAAA;AAClE,2BAA6B,uBAAuB,CAAC,CAAA;AAoBrD;IAAA;QAAA,iBAmDC;QA9CG,WAAM,GAAa,EAAE,CAAC;QACtB,YAAO,GAAoB,EAAE,CAAC;QAC9B,cAAS,GAAsB,EAAE,CAAC;QAUlC,eAAU,GAAG,UAAC,IAAY,EACZ,OAAgE,EAChE,aAAkD;YAAlD,6BAAkD,GAAlD,gBAAgC,2BAAc,CAAC,GAAG;YAC5D,EAAE,CAAA,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,MAAqB;gBACvC,OAAA,MAAM,CAAC,IAAI,KAAK,IAAI;YAApB,CAAoB,CAAC,CAAC;gBACvB,MAAM,6CAA6C,CAAC;YAEvD,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,6BAAa,CAAC,IAAI,EAAE,OAAO,EAAE,kCAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;YAC5F,MAAM,CAAC,KAAI,CAAA;QACf,CAAC,CAAC;QAEF,qBAAgB,GAAG,UAAC,IAAY,EACZ,OAAgE,EAChE,aAAkD;YAAlD,6BAAkD,GAAlD,gBAAgC,2BAAc,CAAC,GAAG;YAClE,EAAE,CAAA,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,MAAqB;gBACvC,OAAA,MAAM,CAAC,IAAI,KAAK,IAAI;oBACpB,CAAC,MAAM,CAAC,KAAK,IAAI,kCAAkB,CAAC,UAAU,IAAI,MAAM,CAAC,KAAK,IAAI,kCAAkB,CAAC,IAAI,CAAC;YAD1F,CAC0F,CAAC,CAAC;gBAC5F,MAAM,wDAAwD,CAAC;YAEnE,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,6BAAa,CAAC,IAAI,EAAE,OAAO,EAAE,kCAAkB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC,CAAC;YAClG,MAAM,CAAC,KAAI,CAAA;QACf,CAAC,CAAC;QAEF,gBAAW,GAAG,UAAC,IAAY,EACZ,OAAgE,EAChE,aAAkD;YAAlD,6BAAkD,GAAlD,gBAAgC,2BAAc,CAAC,GAAG;YAC7D,EAAE,CAAA,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,MAAqB;gBACvC,OAAA,MAAM,CAAC,IAAI,KAAK,IAAI;oBACpB,CAAC,MAAM,CAAC,KAAK,IAAI,kCAAkB,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,IAAI,kCAAkB,CAAC,IAAI,CAAC;YADrF,CACqF,CAAC,CAAC;gBACvF,MAAM,oDAAoD,CAAC;YAE/D,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,6BAAa,CAAC,IAAI,EAAE,OAAO,EAAE,kCAAkB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;YAC7F,MAAM,CAAC,KAAI,CAAA;QACf,CAAC,CAAC;IACN,CAAC;IAAD,cAAC;AAAD,CAAC,AAnDD,IAmDC;AAnDqB,eAAO,UAmD5B,CAAA","sourcesContent":["import {ApiEdgeRelation} from \"../relations/ApiEdgeRelation\";\nimport {ApiEdgeQueryContext} from \"./ApiEdgeQueryContext\";\nimport {ApiEdgeQueryResponse} from \"./ApiEdgeQueryResponse\";\nimport {ApiQueryScope} from \"../query/ApiQuery\";\nimport {ApiEdgeMethod, ApiEdgeMethodScope} from \"./ApiEdgeMethod\";\nimport {ApiRequestType} from \"../request/ApiRequest\";\n\nexport interface ApiEdgeDefinition {\n    name: string;\n    pluralName: string;\n    idField: string;\n\n    fields: string[];\n    methods: ApiEdgeMethod[];\n    relations: ApiEdgeRelation[];\n\n    getEntry: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    listEntries: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    createEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    updateEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    patchEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    removeEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    exists: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n}\n\nexport abstract class ApiEdge implements ApiEdgeDefinition {\n    name: string;\n    pluralName: string;\n    idField: string;\n\n    fields: string[] = [];\n    methods: ApiEdgeMethod[] = [];\n    relations: ApiEdgeRelation[] = [];\n\n    getEntry: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    listEntries: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    createEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    updateEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    patchEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    removeEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    exists: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n\n    edgeMethod = (name: string,\n                  execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                  acceptedTypes: ApiRequestType = ApiRequestType.Any): ApiEdge => {\n        if(this.methods.find((method: ApiEdgeMethod) =>\n            method.name === name))\n           throw \"A method with the same name already exists.\";\n\n        this.methods.push(new ApiEdgeMethod(name, execute, ApiEdgeMethodScope.Edge, acceptedTypes));\n        return this\n    };\n\n    collectionMethod = (name: string,\n                        execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                        acceptedTypes: ApiRequestType = ApiRequestType.Any): ApiEdge => {\n        if(this.methods.find((method: ApiEdgeMethod) =>\n            method.name === name &&\n            (method.scope == ApiEdgeMethodScope.Collection || method.scope == ApiEdgeMethodScope.Edge)))\n            throw \"A collection method with the same name already exists.\";\n\n        this.methods.push(new ApiEdgeMethod(name, execute, ApiEdgeMethodScope.Collection, acceptedTypes));\n        return this\n    };\n\n    entryMethod = (name: string,\n                   execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                   acceptedTypes: ApiRequestType = ApiRequestType.Any): ApiEdge => {\n        if(this.methods.find((method: ApiEdgeMethod) =>\n            method.name === name &&\n            (method.scope == ApiEdgeMethodScope.Entry || method.scope == ApiEdgeMethodScope.Edge)))\n            throw \"An entry method with the same name already exists.\";\n\n        this.methods.push(new ApiEdgeMethod(name, execute, ApiEdgeMethodScope.Entry, acceptedTypes));\n        return this\n    };\n}"]}