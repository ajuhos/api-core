{"version":3,"file":"ApiEdgeQuery.js","sourceRoot":"","sources":["../../../src/edge/ApiEdgeQuery.ts"],"names":[],"mappings":";AACA,iCAA+B,oBAAoB,CAAC,CAAA;AACpD,oCAAkC,uBAAuB,CAAC,CAAA;AAE1D,6BAA2B,uBAAuB,CAAC,CAAA;AAGnD;IA6BI,sBAAY,IAAuB,EACvB,IAA6C,EAC7C,OAAwD,EACxD,IAAgB;QAhChC,iBAkFC;QApDe,oBAA6C,GAA7C,OAAyB,mCAAgB,CAAC,GAAG;QAC7C,uBAAwD,GAAxD,cAAmC,yCAAmB,EAAE;QACxD,oBAAgB,GAAhB,WAAgB;QAOpB,sBAAiB,GAAG,UAAC,IAAS;YAClC,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,cAA2C;gBACjF,OAAA,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;YAA3F,CAA2F,CAAC,CAAC;YACjG,MAAM,CAAC,MAAM,CAAA;QACjB,CAAC,CAAC;QAEM,oBAAe,GAAG,UAAC,KAA2B;YAClD,EAAE,CAAA,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gBACjB,MAAM,CAAC,KAAK,CAAC;YAEjB,KAAK,CAAC,IAAI,GAAI,KAAK,CAAC,IAAc,CAAC,GAAG,CAAC,UAAC,IAAS,IAAK,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC;YACpF,MAAM,CAAC,KAAK,CAAA;QAChB,CAAC,CAAC;QAEM,gBAAW,GAAG,UAAC,KAA2B;YAC9C,EAAE,CAAA,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gBACjB,MAAM,CAAC,KAAK,CAAC;YAEjB,KAAK,CAAC,IAAI,GAAG,KAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,CAAA;QAChB,CAAC,CAAC;QAEF,YAAO,GAAG;YACN,MAAM,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChB,KAAK,mCAAgB,CAAC,GAAG;oBACrB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;gBACnE,KAAK,mCAAgB,CAAC,MAAM;oBACxB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gBAC1C,KAAK,mCAAgB,CAAC,MAAM;oBACxB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;gBACjF,KAAK,mCAAgB,CAAC,MAAM;oBACxB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;gBACjF,KAAK,mCAAgB,CAAC,MAAM;oBACxB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;gBACjF,KAAK,mCAAgB,CAAC,KAAK;oBACvB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;gBAChF,KAAK,mCAAgB,CAAC,IAAI;oBACtB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,CAAC;gBAC1E;oBACI,MAAM,IAAI,2BAAY,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAA;YAC7D,CAAC;QACL,CAAC,CAAA;QAhDG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IA6CL,mBAAC;AAAD,CAAC,AAlFD,IAkFC;AAlFY,oBAAY,eAkFxB,CAAA","sourcesContent":["import {ApiEdgeDefinition} from './ApiEdgeDefinition';\nimport {ApiEdgeQueryType} from './ApiEdgeQueryType';\nimport {ApiEdgeQueryContext} from \"./ApiEdgeQueryContext\";\nimport {ApiEdgeQueryResponse} from \"./ApiEdgeQueryResponse\";\nimport {ApiEdgeError} from \"../query/ApiEdgeError\";\nimport {ApiEdgeSchemaTransformation} from \"./ApiEdgeSchema\";\n\nexport class ApiEdgeQuery {\n\n    /**\n     * The API edge to execute the query on.\n     */\n    edge: ApiEdgeDefinition;\n\n    /**\n     * The type of query to execute.\n     */\n    type: ApiEdgeQueryType;\n\n    /**\n     * The list of parameters to use during execution.\n     */\n    context: ApiEdgeQueryContext;\n\n    /**\n     * The list of parameters to use during execution.\n     */\n    body: any;\n\n    /**\n     * Create a new API Edge Query for the specified API Edge with the specified parameters.\n     * @param {ApiEdgeDefinition} edge\n     * @param {ApiEdgeQueryType} type\n     * @param {ApiEdgeQueryContext} context\n     * @param {object} body\n     */\n    constructor(edge: ApiEdgeDefinition,\n                type: ApiEdgeQueryType = ApiEdgeQueryType.Get,\n                context: ApiEdgeQueryContext = new ApiEdgeQueryContext(),\n                body: any = null) {\n        this.edge = edge;\n        this.type = type;\n        this.context = context;\n        this.body = body;\n    }\n\n    private applySchemaOnItem = (item: any) => {\n        let output = {};\n        this.edge.schema.transformations.forEach((transformation: ApiEdgeSchemaTransformation) =>\n            transformation.value.assign(output, transformation.apply(transformation.value(item), item)));\n        return output\n    };\n\n    private applyListSchema = (value: ApiEdgeQueryResponse) => {\n        if(!this.edge.schema)\n            return value;\n\n        value.data = (value.data as any[]).map((item: any) => this.applySchemaOnItem(item));\n        return value\n    };\n\n    private applySchema = (value: ApiEdgeQueryResponse): ApiEdgeQueryResponse|Promise<ApiEdgeQueryResponse> => {\n        if(!this.edge.schema)\n            return value;\n\n        value.data = this.applySchemaOnItem(value.data);\n        return value\n    };\n\n    execute = (): Promise<ApiEdgeQueryResponse> => {\n        switch (this.type) {\n            case ApiEdgeQueryType.Get:\n                return this.edge.getEntry(this.context).then(this.applySchema);\n            case ApiEdgeQueryType.Exists:\n                return this.edge.exists(this.context);\n            case ApiEdgeQueryType.Create:\n                return this.edge.createEntry(this.context, this.body).then(this.applySchema);\n            case ApiEdgeQueryType.Delete:\n                return this.edge.removeEntry(this.context, this.body).then(this.applySchema);\n            case ApiEdgeQueryType.Update:\n                return this.edge.updateEntry(this.context, this.body).then(this.applySchema);\n            case ApiEdgeQueryType.Patch:\n                return this.edge.patchEntry(this.context, this.body).then(this.applySchema);\n            case ApiEdgeQueryType.List:\n                return this.edge.listEntries(this.context).then(this.applyListSchema);\n            default:\n                throw new ApiEdgeError(500, \"Unsupported Query Type\")\n        }\n    }\n}"]}