{"version":3,"file":"ApiEdgeQuery.js","sourceRoot":"","sources":["../../../src/edge/ApiEdgeQuery.ts"],"names":[],"mappings":";AACA,iCAA+B,oBAAoB,CAAC,CAAA;AACpD,oCAAkC,uBAAuB,CAAC,CAAA;AAK1D;IA6BI,sBAAY,IAAuB,EACvB,IAA6C,EAC7C,OAAwD,EACxD,IAAgB;QAhChC,iBAyDC;QA3Be,oBAA6C,GAA7C,OAAyB,mCAAgB,CAAC,GAAG;QAC7C,uBAAwD,GAAxD,cAAmC,yCAAmB,EAAE;QACxD,oBAAgB,GAAhB,WAAgB;QAO5B,YAAO,GAAG;YACN,MAAM,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChB,KAAK,mCAAgB,CAAC,GAAG;oBACrB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gBAC5C,KAAK,mCAAgB,CAAC,MAAM;oBACxB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gBAC1C,KAAK,mCAAgB,CAAC,MAAM;oBACxB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;gBAC1D,KAAK,mCAAgB,CAAC,MAAM;oBACxB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gBAC/C,KAAK,mCAAgB,CAAC,MAAM;oBACxB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;gBAC1D,KAAK,mCAAgB,CAAC,IAAI;oBACtB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gBAC/C,KAAK,mCAAgB,CAAC,IAAI;oBACtB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;YAC7D,CAAC;QACL,CAAC,CAAA;QAvBG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAoBL,mBAAC;AAAD,CAAC,AAzDD,IAyDC;AAzDY,oBAAY,eAyDxB,CAAA","sourcesContent":["import {ApiEdgeDefinition} from './ApiEdgeDefinition';\nimport {ApiEdgeQueryType} from './ApiEdgeQueryType';\nimport {ApiEdgeQueryContext} from \"./ApiEdgeQueryContext\";\n\n//Required for execute\nimport {ApiEdgeQueryResponse} from \"./ApiEdgeQueryResponse\";\n\nexport class ApiEdgeQuery {\n\n    /**\n     * The API edge to execute the query on.\n     */\n    edge: ApiEdgeDefinition;\n\n    /**\n     * The type of query to execute.\n     */\n    type: ApiEdgeQueryType;\n\n    /**\n     * The list of parameters to use during execution.\n     */\n    context: ApiEdgeQueryContext;\n\n    /**\n     * The list of parameters to use during execution.\n     */\n    body: any;\n\n    /**\n     * Create a new API Edge Query for the specified API Edge with the specified parameters.\n     * @param {ApiEdgeDefinition} edge\n     * @param {ApiEdgeQueryType} type\n     * @param {ApiEdgeQueryContext} context\n     * @param {object} body\n     */\n    constructor(edge: ApiEdgeDefinition,\n                type: ApiEdgeQueryType = ApiEdgeQueryType.Get,\n                context: ApiEdgeQueryContext = new ApiEdgeQueryContext(),\n                body: any = null) {\n        this.edge = edge;\n        this.type = type;\n        this.context = context;\n        this.body = body;\n    }\n\n    execute = () => {\n        switch (this.type) {\n            case ApiEdgeQueryType.Get:\n                return this.edge.getEntry(this.context);\n            case ApiEdgeQueryType.Exists:\n                return this.edge.exists(this.context);\n            case ApiEdgeQueryType.Create:\n                return this.edge.createEntry(this.context, this.body);\n            case ApiEdgeQueryType.Delete:\n                return this.edge.removeEntry(this.context);\n            case ApiEdgeQueryType.Update:\n                return this.edge.updateEntry(this.context, this.body);\n            case ApiEdgeQueryType.List:\n                return this.edge.listEntries(this.context);\n            case ApiEdgeQueryType.Call:\n                return this.edge.callMethod(this.context, this.body);\n        }\n    }\n}"]}