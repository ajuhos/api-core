{"version":3,"file":"ApiQuery.js","sourceRoot":"","sources":["../../../src/query/ApiQuery.ts"],"names":[],"mappings":";AAAA,oCAAkC,6BAA6B,CAAC,CAAA;AAChE,qCAAmC,8BAA8B,CAAC,CAAA;AAkBlE;IAAA;QAAA,iBAwCC;QAtCG,UAAK,GAAgB,EAAE,CAAC;QAExB,YAAO,GAAG,UAAC,IAAe;YACtB,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,KAAI,CAAA;QACf,CAAC,CAAC;QAOF,YAAO,GAAG,UAAC,QAAoB;YAApB,wBAAoB,GAApB,eAAoB;YAC3B,MAAM,CAAC,IAAI,OAAO,CAAuB,UAAC,OAAO,EAAE,MAAM;gBACrD,IAAI,IAAI,GAAG,UAAC,KAAoB;oBAC5B,IAAI,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAClC,EAAE,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC;wBACN,KAAK,CAAC,IAAI,EAAE,CAAC;wBACb,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;4BACjC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBACjD,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,2CAAoB,CAAC,IAAI,CAAC,CAAC,EAAzD,CAAyD,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBAC/G,CAAC;oBACL,CAAC;gBACL,CAAC,CAAC;gBAEF,IAAI,CAAC;oBACD,OAAO,EAAE,IAAI,yCAAmB,EAAE;oBAClC,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,KAAI,CAAC,OAAO;oBACrB,QAAQ,EAAE,IAAI;oBACd,KAAK,EAAE,KAAI;oBACX,IAAI,EAAE,CAAC;oBACP,kBAAQ;iBACX,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC,CAAA;IACL,CAAC;IAAD,eAAC;AAAD,CAAC,AAxCD,IAwCC;AAxCY,gBAAQ,WAwCpB,CAAA","sourcesContent":["import {ApiEdgeQueryContext} from \"../edge/ApiEdgeQueryContext\";\nimport {ApiEdgeQueryResponse} from \"../edge/ApiEdgeQueryResponse\";\nimport {ApiRequest} from \"../request/ApiRequest\";\n\n\nexport interface ApiQueryScope {\n    context: ApiEdgeQueryContext,\n    body: any|null,\n    identity: any|null,\n    response: ApiEdgeQueryResponse|null,\n    query: ApiQuery,\n    request: ApiRequest,\n    step: number\n}\n\nexport interface QueryStep {\n    execute(scope: ApiQueryScope): Promise<ApiQueryScope>;\n}\n\nexport class ApiQuery {\n    request: ApiRequest;\n    steps: QueryStep[] = [];\n\n    unshift = (step: QueryStep): ApiQuery => {\n        this.steps.unshift(step);\n        return this\n    };\n\n/*    push = (step: QueryStep): ApiQuery => {\n        this.steps.push(step);\n        return this\n    };*/\n\n    execute = (identity: any = null): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            let next = (scope: ApiQueryScope) => {\n                let step = this.steps[scope.step];\n                if(step) {\n                    scope.step++;\n                    if (scope.step < this.steps.length) {\n                        step.execute(scope).then(next).catch(reject);\n                    }\n                    else {\n                        step.execute(scope).then(scope => resolve(scope.response || new ApiEdgeQueryResponse(null))).catch(reject);\n                    }\n                }\n            };\n\n            next({\n                context: new ApiEdgeQueryContext(),\n                body: null,\n                request: this.request,\n                response: null,\n                query: this,\n                step: 0,\n                identity\n            });\n        })\n    }\n}\n"]}