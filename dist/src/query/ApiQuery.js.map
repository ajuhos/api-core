{"version":3,"file":"ApiQuery.js","sourceRoot":"","sources":["../../../src/query/ApiQuery.ts"],"names":[],"mappings":";AAAA,oCAAkC,6BAA6B,CAAC,CAAA;AAChE,qCAAmC,8BAA8B,CAAC,CAAA;AAalE;IAAA;QAAA,iBA8BC;QA7BG,UAAK,GAAgB,EAAE,CAAC;QAExB,YAAO,GAAG,UAAC,IAAe;YACtB,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,KAAI,CAAA;QACf,CAAC,CAAC;QAOF,YAAO,GAAG;YACN,MAAM,CAAC,IAAI,OAAO,CAAuB,UAAC,OAAO,EAAE,MAAM;gBACrD,IAAI,IAAI,GAAG,UAAC,KAAoB;oBAC5B,IAAI,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;oBAC9B,EAAE,CAAA,CAAC,IAAI,CAAC,CAAC,CAAC;wBACN,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;4BACpB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBACjD,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,2CAAoB,CAAC,IAAI,CAAC,CAAC,EAAzD,CAAyD,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBAC/G,CAAC;oBACL,CAAC;gBACL,CAAC,CAAC;gBAEF,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,yCAAmB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAA;QACN,CAAC,CAAA;IACL,CAAC;IAAD,eAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,gBAAQ,WA8BpB,CAAA","sourcesContent":["import {ApiEdgeQueryContext} from \"../edge/ApiEdgeQueryContext\";\nimport {ApiEdgeQueryResponse} from \"../edge/ApiEdgeQueryResponse\";\n\n\nexport interface ApiQueryScope {\n    context: ApiEdgeQueryContext,\n    body: any|null,\n    response: ApiEdgeQueryResponse|null\n}\n\nexport interface QueryStep {\n    execute(scope: ApiQueryScope): Promise<ApiQueryScope>;\n}\n\nexport class ApiQuery {\n    steps: QueryStep[] = [];\n\n    unshift = (step: QueryStep): ApiQuery => {\n        this.steps.unshift(step);\n        return this\n    };\n\n/*    push = (step: QueryStep): ApiQuery => {\n        this.steps.push(step);\n        return this\n    };*/\n\n    execute = (): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            let next = (scope: ApiQueryScope) => {\n                let step = this.steps.shift();\n                if(step) {\n                    if (this.steps.length) {\n                        step.execute(scope).then(next).catch(reject);\n                    }\n                    else {\n                        step.execute(scope).then(scope => resolve(scope.response || new ApiEdgeQueryResponse(null))).catch(reject);\n                    }\n                }\n            };\n\n            next({ context: new ApiEdgeQueryContext(), body: null, response: null});\n        })\n    }\n}\n"]}