{"version":3,"file":"ApiQueryBuilder.js","sourceRoot":"","sources":["../../../src/query/ApiQueryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {QueryStep, ApiQueryScope, ApiQuery} from \"./ApiQuery\";\nimport {ApiEdgeQuery} from \"../edge/ApiEdgeQuery\";\nimport {ApiEdgeQueryContext} from \"../edge/ApiEdgeQueryContext\";\nimport {ApiEdgeRelation} from \"../relations/ApiEdgeRelation\";\nimport {ApiEdgeError} from \"./ApiEdgeError\";\nimport {ApiEdgeQueryFilterType} from \"../edge/ApiEdgeQueryFilter\";\nimport {\n    PathSegment, EntryPathSegment, RelatedFieldPathSegment, ApiRequest,\n    EdgePathSegment, ApiRequestType\n} from \"../request/ApiRequest\";\nimport {ApiEdgeQueryResponse} from \"../edge/ApiEdgeQueryResponse\";\nimport {ApiEdgeQueryType} from \"../edge/ApiEdgeQueryType\";\nimport {OneToOneRelation} from \"../relations/OneToOneRelation\";\nimport {Api} from \"../Api\";\n\nexport class QueryEdgeQueryStep implements QueryStep {\n    query: ApiEdgeQuery;\n\n    constructor(query: ApiEdgeQuery) {\n        this.query = query;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            this.query.body = scope.body;\n            this.query.context = scope.context;\n            //console.log(`QUERY /${this.query.edge.pluralName}`, scope.context);\n            this.query.execute().then((response) => {\n                scope.context = new ApiEdgeQueryContext();\n                scope.response = response;\n                resolve(scope)\n            }).catch(reject);\n        })\n    };\n\n    inspect = () => `QUERY /${this.query.edge.pluralName}`;\n}\n\nexport class RelateQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            scope.context.filter(this.relation.relationId, ApiEdgeQueryFilterType.Equals, scope.response.data[this.relation.from.idField||Api.defaultIdField]);\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE ${this.relation.relationId}`;\n}\n\n/*export class CheckResponseQueryStep implements QueryStep {\n    execute = (scope: QueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `CHECK`;\n}\n\nexport class NotImplementedQueryStep implements QueryStep {\n    description: string;\n\n    constructor(description: string) {\n        this.description = description;\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise(resolve => {\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `NOT IMPLEMENTED: ${this.description}`;\n}*/\n\nexport class SetResponseQueryStep implements QueryStep {\n    response: ApiEdgeQueryResponse;\n\n    constructor(response: ApiEdgeQueryResponse) {\n        this.response = response;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise(resolve => {\n            scope.response = this.response;\n            scope.context = new ApiEdgeQueryContext();\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `SET RESPONSE`;\n}\n\nexport class SetBodyQueryStep implements QueryStep {\n    body: any;\n\n    constructor(body: any) {\n        this.body = body;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise(resolve => {\n            scope.body = this.body;\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `SET BODY`;\n}\n\nexport class ProvideIdQueryStep implements QueryStep {\n    fieldName: string;\n\n    constructor(fieldName: string = Api.defaultIdField) {\n        this.fieldName = fieldName;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Entry\"));\n            scope.context.id = scope.response.data[this.fieldName];\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `PROVIDE ID: ${this.fieldName}`;\n}\n\nexport class ExtendContextQueryStep implements QueryStep {\n    context: ApiEdgeQueryContext;\n\n    constructor(context: ApiEdgeQueryContext) {\n        this.context = context\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise(resolve => {\n            scope.context.id = this.context.id || scope.context.id;\n            if(this.context.pagination) {\n                scope.context.pagination = this.context.pagination;\n            }\n            this.context.fields.forEach(f => scope.context.fields.push(f));\n            this.context.populatedFields.forEach(f => scope.context.populatedFields.push(f));\n            this.context.filters.forEach(f => scope.context.filters.push(f));\n            this.context.sortBy.forEach(f => scope.context.sortBy.push(f));\n            resolve(scope)\n        })\n    };\n\n    inspect = () => {\n        if(this.context.id) {\n            return `EXTEND CONTEXT (id=${this.context.id})`\n        }\n        else {\n            return `APPLY PARAMETERS`\n        }\n    };\n}\n\n/*export class GenericQueryStep implements QueryStep {\n    description: string;\n    step: () => Promise<QueryScope>;\n    context: any;\n\n    constructor(description: string, step: () => Promise<QueryScope>, context: any) {\n        this.description = description;\n        this.step = step;\n        this.context = context;\n    }\n\n    execute = (scope: QueryScope) => {\n        return this.step.apply(this.context, [ scope ]);\n    };\n\n    inspect = () => this.description\n}*/\n\nexport class ApiQueryBuilder {\n    api: Api;\n\n    constructor(api: Api) {\n        this.api = api;\n    }\n\n    private buildProvideIdStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        if(currentSegment instanceof EntryPathSegment) {\n            query.unshift(new ExtendContextQueryStep(new ApiEdgeQueryContext(currentSegment.id)));\n            return false\n        }\n        else if(currentSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new ProvideIdQueryStep(currentSegment.relation.relationId));\n            return true\n        }\n        else {\n            //TODO: Add support for method calls\n            return false\n        }\n    }\n\n    private buildCheckStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        //STEP 1: Create the check query.\n        //query.unshift(new NotImplementedQueryStep(\"CHECK\"));\n        //TODO\n        if(currentSegment instanceof EntryPathSegment) {\n            query.unshift(new SetResponseQueryStep(new ApiEdgeQueryResponse({ [currentSegment.edge.idField||Api.defaultIdField]: currentSegment.id })));\n            return false\n        }\n        else if(currentSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.relation.to, ApiEdgeQueryType.Get)));\n        }\n        else {\n            //TODO: Add support for method calls\n            return false\n        }\n\n        //STEP 2: Provide ID for the check query.\n        return this.buildProvideIdStep(query, currentSegment)\n    }\n\n    private buildReadStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        //STEP 1: Create the read query.\n        if(currentSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.relation.to, ApiEdgeQueryType.Get)));\n        }\n        else {\n            query.unshift(new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.edge, ApiEdgeQueryType.Get)));\n        }\n\n        //STEP 2: Provide ID for the read query.\n        return this.buildProvideIdStep(query, currentSegment)\n    }\n\n    private buildReadQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1];\n\n        //STEP 1: Create the base query which will provide the final data.\n        let baseQuery: ApiEdgeQuery;\n        if(lastSegment instanceof EdgePathSegment) {\n            baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.List);\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            baseQuery = new ApiEdgeQuery(lastSegment.relation.to, ApiEdgeQueryType.Get);\n        }\n        //TODO: Add support for method calls\n        else {\n            baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Get);\n        }\n        query.unshift(new QueryEdgeQueryStep(baseQuery));\n\n        //STEP 2: Provide context for the base query.\n        query.unshift(new ExtendContextQueryStep(request.context));\n\n        //STEP 3: Provide ID for the base query.\n        if(lastSegment instanceof EntryPathSegment) {\n            query.unshift(new ExtendContextQueryStep(new ApiEdgeQueryContext(lastSegment.id)))\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new ProvideIdQueryStep(lastSegment.relation.relationId))\n        }\n        else {\n            //TODO: Add support for method calls\n        }\n\n        //STEP 4: Provide filters and validation for the base query.\n        let readMode = true;\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                query.unshift(new RelateQueryStep(relation));\n            }\n\n            //STEP 2: Read or Check\n            if(readMode) {\n                readMode = this.buildReadStep(query, currentSegment)\n            }\n            else {\n                readMode = this.buildCheckStep(query, currentSegment)\n            }\n        }\n\n        //STEP 5: Return the completed query.\n        return query\n    };\n\n    private buildChangeQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1];\n\n        //STEP 1: Create the base query which will provide the final data.\n        let baseQuery: ApiEdgeQuery;\n        if(lastSegment instanceof RelatedFieldPathSegment) {\n            if(request.type === ApiRequestType.Update) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Patch);\n                request.body = { [lastSegment.relation.relationId]: request.body.id||request.body._id };\n            }\n            else if(request.type === ApiRequestType.Patch) {\n                baseQuery = new ApiEdgeQuery(lastSegment.relation.to, ApiEdgeQueryType.Patch);\n            }\n            else {\n                throw new ApiEdgeError(400, \"Invalid Delete Query\");\n            }\n        }\n        //TODO: Add support for method calls\n        else {\n            if(request.type === ApiRequestType.Update) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Update);\n            }\n            else if(request.type === ApiRequestType.Patch) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Patch);\n            }\n            else {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Delete);\n            }\n        }\n        query.unshift(new QueryEdgeQueryStep(baseQuery));\n\n        //STEP 2: Provide context for the base query.\n        if(request.body) query.unshift(new SetBodyQueryStep(request.body));\n        query.unshift(new ExtendContextQueryStep(request.context));\n\n        //STEP 3: Provide ID for the base query.\n        let readMode = true;\n        if(lastSegment instanceof EntryPathSegment) {\n            query.unshift(new ExtendContextQueryStep(new ApiEdgeQueryContext(lastSegment.id)))\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            if(request.type === ApiRequestType.Update) {\n                let previousSegment = segments[segments.length-2];\n                query.unshift(new ProvideIdQueryStep(previousSegment.edge.idField||Api.defaultIdField));\n                readMode = false; //Provide ID from the previous segment without querying the database.\n            }\n            else {\n                query.unshift(new ProvideIdQueryStep(lastSegment.relation.relationId))\n            }\n        }\n        else {\n            //TODO: Add support for method calls\n        }\n\n        //STEP 4: Provide filters and validation for the base query.\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                query.unshift(new RelateQueryStep(relation));\n            }\n\n            //STEP 2: Read or Check\n            if(readMode) {\n                readMode = this.buildReadStep(query, currentSegment)\n            }\n            else {\n                readMode = this.buildCheckStep(query, currentSegment)\n            }\n        }\n\n        //STEP 5: Return the completed query.\n        return query\n    };\n\n    private buildCreateQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1];\n\n        //STEP 1: Validate query\n        if(segments.length != 1 || !(lastSegment instanceof EdgePathSegment)) {\n            throw new ApiEdgeError(400, \"Invalid Create Query\")\n        }\n\n        //STEP 2: Create the base query which will provide the final data.\n        query.unshift(new QueryEdgeQueryStep(new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Create)));\n\n        //STEP 3: Provide context for the base query.\n        query.unshift(new SetBodyQueryStep(request.body));\n\n        //STEP 4: Return the completed query.\n        return query\n    };\n\n\n    build = (request: ApiRequest): ApiQuery => {\n        switch(request.type) {\n            case ApiRequestType.Read:\n                return this.buildReadQuery(request);\n            case ApiRequestType.Update:\n            case ApiRequestType.Patch:\n            case ApiRequestType.Delete:\n                return this.buildChangeQuery(request);\n            case ApiRequestType.Create:\n                return this.buildCreateQuery(request);\n            default:\n                throw new ApiEdgeError(400, \"Unsupported Query Type\")\n        }\n    }\n}\n"]}