{"version":3,"file":"ApiQueryBuilder.js","sourceRoot":"","sources":["../../../src/query/ApiQueryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {QueryStep, ApiQueryScope, ApiQuery} from \"./ApiQuery\";\nimport {ApiEdgeQuery} from \"../edge/ApiEdgeQuery\";\nimport {ApiEdgeQueryContext} from \"../edge/ApiEdgeQueryContext\";\nimport {ApiEdgeRelation} from \"../relations/ApiEdgeRelation\";\nimport {ApiEdgeError} from \"./ApiEdgeError\";\nimport {ApiEdgeQueryFilter, ApiEdgeQueryFilterType} from \"../edge/ApiEdgeQueryFilter\";\nimport {\n    PathSegment, EntryPathSegment, RelatedFieldPathSegment, ApiRequest,\n    EdgePathSegment, ApiRequestType, MethodPathSegment\n} from \"../request/ApiRequest\";\nimport {ApiEdgeQueryResponse} from \"../edge/ApiEdgeQueryResponse\";\nimport {ApiEdgeQueryType} from \"../edge/ApiEdgeQueryType\";\nimport {OneToOneRelation} from \"../relations/OneToOneRelation\";\nimport {Api} from \"../Api\";\nimport {ApiEdgeMethod} from \"../edge/ApiEdgeMethod\";\nimport {ApiEdgeAction, ApiEdgeActionTriggerKind, ApiEdgeActionTrigger} from \"../edge/ApiEdgeAction\";\nimport {ApiAction, ApiActionTriggerKind} from \"./ApiAction\";\nconst parse = require('obj-parse');\n\nexport class EmbedQueryQueryStep implements QueryStep {\n    query: ApiQuery;\n    request: ApiRequest;\n    segment: PathSegment;\n    sourceField: string;\n    targetField: string;\n    idField: string;\n\n    constructor(query: ApiQuery, segment: PathSegment, request: ApiRequest) {\n        this.query = query;\n        this.query.request = this.request = request;\n        this.segment = segment;\n\n        if(!this.segment.relation) throw new Error('Invalid relation provided.');\n        this.sourceField = this.segment.relation.relationId;\n        this.targetField = this.segment.relation.name;\n        this.idField = this.segment.relation.relatedId;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(scope.response) {\n                const target = scope.response.data;\n\n                if(Array.isArray(target)) {\n                    const targetIndex: { [key: string]: any[] } = {},\n                        ids: string[] = [];\n\n                    for(let entry of target) {\n                        const id = entry[this.sourceField];\n                        if(id) {\n                            if (targetIndex[id]) targetIndex[id].push(entry);\n                            else targetIndex[id] = [entry];\n                            ids.push(id);\n                        }\n                    }\n\n                    this.request.context.filters = [\n                        new ApiEdgeQueryFilter(this.idField, ApiEdgeQueryFilterType.In, ids)\n                    ];\n\n                    this.query.execute(scope.identity).then((response) => {\n                        if(response.data && response.data.length) {\n                            for (let entry of response.data) {\n                                const id = entry[this.idField];\n                                if (targetIndex[id]) {\n                                    for (let subEntry of targetIndex[id]) {\n                                        subEntry[this.targetField] = entry;\n                                    }\n                                }\n                            }\n                        }\n                        resolve(scope)\n                    }).catch(reject);\n                }\n                else {\n\n                    //Now we can replace TBD and provide a real id for the query.\n                    (this.segment as EntryPathSegment).id = target[this.sourceField];\n\n                    this.query.execute(scope.identity).then((response) => {\n                        target[this.targetField] = response.data;\n                        resolve(scope)\n                    }).catch(reject);\n                }\n            }\n            else resolve(scope)\n        })\n    };\n\n    inspect = () => `EMBED QUERY /${this.sourceField} -> ${this.targetField}`;\n}\n\nexport class QueryEdgeQueryStep implements QueryStep {\n    query: ApiEdgeQuery;\n\n    constructor(query: ApiEdgeQuery) {\n        this.query = query;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            this.query.body = scope.body;\n            this.query.context = scope.context;\n\n            this.query.execute().then((response) => {\n                scope.context = new ApiEdgeQueryContext();\n                scope.response = response;\n                resolve(scope)\n            }).catch(reject);\n        })\n    };\n\n    inspect = () => `QUERY /${this.query.edge.pluralName}`;\n}\n\nexport class CallMethodQueryStep implements QueryStep {\n    method: ApiEdgeMethod;\n\n    constructor(method: ApiEdgeMethod) {\n        this.method = method;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            this.method.execute(scope).then((response) => {\n                scope.response = response;\n                resolve(scope)\n            }).catch(reject);\n        })\n    };\n\n    inspect = () => `call{${this.method.name}}`;\n}\n\nexport class RelateQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            scope.context.filter(this.relation.relationId, ApiEdgeQueryFilterType.Equals, scope.response.data[this.relation.relatedId]);\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE ${this.relation.relationId} = ${this.relation.relatedId}`;\n}\n\nexport class RelateBackwardsQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            scope.context.filter(this.relation.relatedId, ApiEdgeQueryFilterType.Equals, scope.response.data[this.relation.relationId]);\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE ${this.relation.relatedId} = ${this.relation.relationId}`;\n}\n\nexport class RelateChangeQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.body) return reject(new ApiEdgeError(404, \"Missing Body\"));\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            parse(this.relation.relationId).assign(\n                scope.body,\n                scope.response.data[this.relation.relatedId]);\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE CHANGE ${this.relation.relationId}`;\n}\n\n/*export class CheckResponseQueryStep implements QueryStep {\n    execute = (scope: QueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `CHECK`;\n}\n\nexport class NotImplementedQueryStep implements QueryStep {\n    description: string;\n\n    constructor(description: string) {\n        this.description = description;\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise(resolve => {\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `NOT IMPLEMENTED: ${this.description}`;\n}*/\n\nexport class SetResponseQueryStep implements QueryStep {\n    response: ApiEdgeQueryResponse;\n\n    constructor(response: ApiEdgeQueryResponse) {\n        this.response = response;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise(resolve => {\n            scope.response = this.response;\n            scope.context = new ApiEdgeQueryContext();\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `SET RESPONSE`;\n}\n\nexport class SetBodyQueryStep implements QueryStep {\n    body: any;\n\n    constructor(body: any) {\n        this.body = body;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise(resolve => {\n            scope.body = this.body;\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `SET BODY`;\n}\n\nexport class ProvideIdQueryStep implements QueryStep {\n    fieldName: string;\n\n    constructor(fieldName: string = Api.defaultIdField) {\n        this.fieldName = fieldName;\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Entry\"));\n            scope.context.id = scope.response.data[this.fieldName];\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `PROVIDE ID: ${this.fieldName}`;\n}\n\nexport class ExtendContextQueryStep implements QueryStep {\n    context: ApiEdgeQueryContext;\n\n    constructor(context: ApiEdgeQueryContext) {\n        this.context = context\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise(resolve => {\n            scope.context.id = this.context.id || scope.context.id;\n            if(this.context.pagination) {\n                scope.context.pagination = this.context.pagination;\n            }\n            this.context.fields.forEach(f => scope.context.fields.push(f));\n            this.context.populatedRelations.forEach(f => scope.context.populatedRelations.push(f));\n            this.context.filters.forEach(f => scope.context.filters.push(f));\n            this.context.sortBy.forEach(f => scope.context.sortBy.push(f));\n            resolve(scope)\n        })\n    };\n\n    inspect = () => {\n        if(this.context.id) {\n            return `EXTEND CONTEXT (id=${this.context.id})`\n        }\n        else {\n            return `APPLY PARAMETERS`\n        }\n    };\n}\n\nexport class ExtendContextLiveQueryStep implements QueryStep {\n    apply: (context: ApiEdgeQueryContext) => void|any;\n\n    constructor(func: (context: ApiEdgeQueryContext) => void|any) {\n        this.apply = func\n    }\n\n    execute = (scope: ApiQueryScope) => {\n        return new Promise(resolve => {\n            this.apply(scope.context);\n            resolve(scope)\n        })\n    };\n\n    inspect = () => {\n        return `EXTEND CONTEXT LIVE`\n    };\n}\n\n/*export class GenericQueryStep implements QueryStep {\n    description: string;\n    step: () => Promise<QueryScope>;\n    context: any;\n\n    constructor(description: string, step: () => Promise<QueryScope>, context: any) {\n        this.description = description;\n        this.step = step;\n        this.context = context;\n    }\n\n    execute = (scope: QueryScope) => {\n        return this.step.apply(this.context, [ scope ]);\n    };\n\n    inspect = () => this.description\n}*/\n\nexport class ApiQueryBuilder {\n    api: Api;\n\n    constructor(api: Api) {\n        this.api = api;\n    }\n\n    private addQueryActions(triggerKind: ApiEdgeActionTriggerKind,\n                            query: ApiQuery,\n                            edgeQuery: ApiEdgeQuery,\n                            relation: ApiEdgeRelation|null,\n                            output: boolean = false) {\n        const edge = edgeQuery.edge,\n            queryType = edgeQuery.type,\n            trigger = relation ?\n                ApiEdgeActionTrigger.Relation :\n                (output ? ApiEdgeActionTrigger.OutputQuery : ApiEdgeActionTrigger.SubQuery);\n\n        let actions: ApiEdgeAction[];\n        if(relation) {\n            actions = edge.actions.filter((action: ApiEdgeAction) =>\n                action.triggerKind == triggerKind &&\n                (action.targetTypes & queryType) &&\n                (action.triggers & trigger) &&\n                (!action.triggerNames.length || action.triggerNames.indexOf(relation.name) == -1))\n        }\n        else {\n            actions = edge.actions.filter((action: ApiEdgeAction) =>\n                action.triggerKind == triggerKind &&\n                (action.targetTypes & queryType) &&\n                (action.triggers & trigger))\n        }\n\n        actions.forEach((action: ApiEdgeAction) => query.unshift(action));\n\n        if(output) {\n            const apiTrigger = triggerKind == ApiEdgeActionTriggerKind.BeforeEvent ?\n                ApiActionTriggerKind.BeforeOutput : ApiActionTriggerKind.AfterOutput;\n            this.api.actions\n                .filter((action: ApiAction) => action.triggerKind == apiTrigger)\n                .forEach((action: ApiAction) => query.unshift(action))\n        }\n    }\n\n    private static addMethodCallStep(request: ApiRequest, query: ApiQuery, method: ApiEdgeMethod) {\n        if(method.acceptedTypes & request.type) {\n            //TODO: this.addPostMethodActions(request, query, method);\n            query.unshift(new CallMethodQueryStep(method));\n            //TODO: this.addPreMethodActions(request, query, method);\n        }\n        else {\n            throw new ApiEdgeError(405, \"Method Not Allowed\");\n        }\n    }\n\n    private addQueryStep(query: ApiQuery,\n                         step: QueryEdgeQueryStep,\n                         relation: ApiEdgeRelation|null = null,\n                         output: boolean = false) {\n        this.addQueryActions(ApiEdgeActionTriggerKind.AfterEvent, query, step.query, relation, output);\n        query.unshift(step);\n        this.addQueryActions(ApiEdgeActionTriggerKind.BeforeEvent, query, step.query, relation, output);\n    }\n\n    private static buildProvideIdStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        if(currentSegment instanceof EntryPathSegment) {\n            query.unshift(new ExtendContextLiveQueryStep(context => context.id = currentSegment.id));\n            return false\n        }\n        else if(currentSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new ProvideIdQueryStep(currentSegment.relation.relationId));\n            return true\n        }\n        else {\n            //TODO: Add support for method calls with parameters\n            return false\n        }\n    }\n\n    private buildCheckStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        //STEP 1: Create the check query.\n        //TODO: Check this code...\n        if(currentSegment instanceof EntryPathSegment) {\n            query.unshift(new SetResponseQueryStep(new ApiEdgeQueryResponse({ [currentSegment.edge.idField||Api.defaultIdField]: currentSegment.id })));\n            return false\n        }\n        else if(currentSegment instanceof RelatedFieldPathSegment) {\n            this.addQueryStep(query, new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.relation.to, ApiEdgeQueryType.Get)), currentSegment.relation);\n        }\n        else {\n            //TODO: Add support for method calls (non-base query case)\n            throw new ApiEdgeError(500, \"Not Implemented\")\n        }\n\n        //STEP 2: Provide ID for the check query.\n        return ApiQueryBuilder.buildProvideIdStep(query, currentSegment)\n    }\n\n    private buildReadStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        //STEP 1: Create the read query.\n        if(currentSegment instanceof RelatedFieldPathSegment) {\n            this.addQueryStep(query, new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.relation.to, ApiEdgeQueryType.Get)), currentSegment.relation);\n        }\n        else {\n            this.addQueryStep(query, new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.edge, ApiEdgeQueryType.Get)));\n        }\n\n        //STEP 2: Provide ID for the read query.\n        return ApiQueryBuilder.buildProvideIdStep(query, currentSegment)\n    }\n\n    private buildEmbedSteps(query: ApiQuery, request: ApiRequest, lastSegment: PathSegment) {\n        if(request.type === ApiRequestType.Read && lastSegment instanceof EdgePathSegment) {\n            for (let relation of request.context.populatedRelations) {\n                const segment = new EdgePathSegment(relation.to, relation);\n\n                const embedRequest = new ApiRequest(request.api);\n                embedRequest.path.add(segment);\n\n                // We add the step directly directly, as pre- and post-actions are not\n                // supported on embed query steps. These actions will be executed as\n                // part of the sub-query.\n                query.unshift(new EmbedQueryQueryStep(this.build(embedRequest), segment, embedRequest));\n            }\n        }\n        else {\n            for (let relation of request.context.populatedRelations) {\n                // The id is literally TBD, it is going to be set one we have the data,\n                // what we build now is only an execution plan.\n                const segment = new EntryPathSegment(relation.to, 'TBD', relation);\n\n                const embedRequest = new ApiRequest(request.api);\n                embedRequest.path.add(segment);\n\n                // We add the step directly directly, as pre- and post-actions are not\n                // supported on embed query steps. These actions will be executed as\n                // part of the sub-query.\n                query.unshift(new EmbedQueryQueryStep(this.build(embedRequest), segment, embedRequest));\n            }\n        }\n    }\n\n    private buildReadQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1];\n\n        //STEP 0: Create embed queries\n        this.buildEmbedSteps(query, request, lastSegment);\n\n        //STEP 1: Create the base query which will provide the final data.\n        let baseQuery: ApiEdgeQuery;\n        if(lastSegment instanceof EdgePathSegment) {\n            baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.List);\n            this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            baseQuery = new ApiEdgeQuery(lastSegment.relation.to, ApiEdgeQueryType.Get);\n            this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), lastSegment.relation, true);\n\n        }\n        else if(lastSegment instanceof MethodPathSegment) {\n            ApiQueryBuilder.addMethodCallStep(request, query, lastSegment.method);\n            query.unshift(new ProvideIdQueryStep(lastSegment.edge.idField));\n        }\n        else {\n            baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Get);\n            this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n        }\n\n        //STEP 2: Provide context for the base query.\n        query.unshift(new ExtendContextQueryStep(request.context));\n\n        //STEP 3: Provide ID for the base query.\n        if(lastSegment instanceof EntryPathSegment) {\n            const _segment = lastSegment; //Add closure to make sure it won't be overridden later.\n            query.unshift(new ExtendContextLiveQueryStep(context => context.id = _segment.id))\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            if(lastSegment.relation.relatedId !== lastSegment.relation.to.idField) {\n                query.unshift(new RelateBackwardsQueryStep(lastSegment.relation));\n            }\n            else {\n                query.unshift(new ProvideIdQueryStep(lastSegment.relation.relationId))\n            }\n        }\n        else {\n            //TODO: Add support for method calls with parameters\n        }\n\n        //STEP 4: Provide filters and validation for the base query.\n        let readMode = true;\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                query.unshift(new RelateQueryStep(relation));\n            }\n\n            //STEP 2: Read or Check\n            if(readMode) {\n                readMode = this.buildReadStep(query, currentSegment)\n            }\n            else {\n                readMode = this.buildCheckStep(query, currentSegment)\n            }\n        }\n\n        //STEP 5: Add OnInput actions\n        this.api.actions\n            .filter((action: ApiAction) => action.triggerKind == ApiActionTriggerKind.OnInput)\n            .forEach((action: ApiAction) => query.unshift(action));\n\n        //STEP 6: Return the completed query.\n        return query\n    };\n\n    private buildChangeQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1],\n            readMode = true;\n\n        //STEP 0: Create embed queries\n        this.buildEmbedSteps(query, request, lastSegment);\n\n        //STEP 1: Create the base query which will provide the final data.\n        let baseQuery: ApiEdgeQuery;\n        if(lastSegment instanceof RelatedFieldPathSegment) {\n            if(request.type === ApiRequestType.Update) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Patch);\n                request.body = { [lastSegment.relation.relationId]: request.body.id||request.body._id };\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n            else if(request.type === ApiRequestType.Patch) {\n                baseQuery = new ApiEdgeQuery(lastSegment.relation.to, ApiEdgeQueryType.Patch);\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n            else {\n                throw new ApiEdgeError(400, \"Invalid Delete Query\");\n            }\n        }\n        else if(lastSegment instanceof MethodPathSegment) {\n            ApiQueryBuilder.addMethodCallStep(request, query, lastSegment.method);\n            query.unshift(new ProvideIdQueryStep(lastSegment.edge.idField));\n            readMode = false;\n        }\n        else {\n            if(request.type === ApiRequestType.Update) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Update);\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n            else if(request.type === ApiRequestType.Patch) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Patch);\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n            else {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Delete);\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n        }\n\n        //STEP 2: Provide context for the base query.\n        query.unshift(new ExtendContextQueryStep(request.context));\n\n        //STEP 3: Provide ID for the base query.\n        if(lastSegment instanceof EntryPathSegment) {\n            const _segment = lastSegment; //Add closure to make sure it won't be overridden later.\n            query.unshift(new ExtendContextLiveQueryStep(context => context.id = _segment.id))\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            if(request.type === ApiRequestType.Update) {\n                let previousSegment = segments[segments.length-2];\n                query.unshift(new ProvideIdQueryStep(previousSegment.edge.idField||Api.defaultIdField));\n                readMode = false; //Provide ID from the previous segment without querying the database.\n            }\n            else {\n                query.unshift(new ProvideIdQueryStep(lastSegment.relation.relationId))\n            }\n        }\n        else {\n            //TODO: Add support for method calls with parameters\n        }\n\n        //STEP 4: Provide filters and validation for the base query.\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                query.unshift(new RelateQueryStep(relation));\n                if(request.type !== ApiRequestType.Delete) {\n                    query.unshift(new RelateChangeQueryStep(relation));\n                }\n            }\n\n            //STEP 2: Read or Check\n            if(readMode) {\n                readMode = this.buildReadStep(query, currentSegment)\n            }\n            else {\n                readMode = this.buildCheckStep(query, currentSegment)\n            }\n        }\n\n        //STEP 5: Provide body for the query\n        if(request.body) query.unshift(new SetBodyQueryStep(request.body));\n\n        //STEP 6: Add OnInput actions\n        this.api.actions\n            .filter((action: ApiAction) => action.triggerKind == ApiActionTriggerKind.OnInput)\n            .forEach((action: ApiAction) => query.unshift(action));\n\n        //STEP 7: Return the completed query.\n        return query\n    };\n\n    private buildCreateQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1];\n\n        //STEP 0: Create embed queries\n        this.buildEmbedSteps(query, request, lastSegment);\n\n        //STEP 1: Create the base query which will provide the final data.\n        if(lastSegment instanceof MethodPathSegment) {\n            ApiQueryBuilder.addMethodCallStep(request, query, lastSegment.method);\n        }\n        else {\n            this.addQueryStep(query, new QueryEdgeQueryStep(new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Create)));\n        }\n\n        //STEP 2: Provide filters and validation for the base query.\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                query.unshift(new RelateChangeQueryStep(relation));\n            }\n\n            //STEP 2: Read or Check\n            this.buildReadStep(query, currentSegment)\n        }\n\n        //STEP 3: Provide context for the base query.\n        query.unshift(new SetBodyQueryStep(request.body));\n\n        //STEP 4: Add OnInput actions\n        this.api.actions\n            .filter((action: ApiAction) => action.triggerKind == ApiActionTriggerKind.OnInput)\n            .forEach((action: ApiAction) => query.unshift(action));\n\n        //STEP 5: Return the completed query.\n        return query\n    };\n\n\n    build = (request: ApiRequest): ApiQuery => {\n        switch(request.type) {\n            case ApiRequestType.Read:\n                return this.buildReadQuery(request);\n            case ApiRequestType.Update:\n            case ApiRequestType.Patch:\n            case ApiRequestType.Delete:\n                return this.buildChangeQuery(request);\n            case ApiRequestType.Create:\n                return this.buildCreateQuery(request);\n            default:\n                throw new ApiEdgeError(400, \"Unsupported Query Type\")\n        }\n    }\n}\n"]}