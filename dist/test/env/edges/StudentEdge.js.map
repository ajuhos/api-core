{"version":3,"file":"StudentEdge.js","sourceRoot":"","sources":["../../../../test/env/edges/StudentEdge.ts"],"names":[],"mappings":";;;;;;AAAA,gCAA8B,yBAAyB,CAAC,CAAA;AACxD,wBAAsB,kBAAkB,CAAC,CAAA;AACzC,0BAAwB,aAAa,CAAC,CAAA;AAEtC,6BAA2B,iCAAiC,CAAC,CAAA;AAE7D;IAAiC,+BAAkB;IAO/C;QACI,iBAAO,CAAC;QAPZ,SAAI,GAAG,SAAS,CAAC;QACjB,eAAU,GAAG,UAAU,CAAC;QAExB,aAAQ,GAAG,iCAAe,CAAC,QAAQ,CAAC;QAC1B,gBAAW,GAAG,UAAC,GAAQ,IAAc,OAAA,IAAI,iBAAO,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC;QAK5D,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAC,KAAoB;YAC5C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;oBACf,MAAM,CAAC,MAAM,CAAC,IAAI,2BAAY,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC;gBAEtD,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAElC,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;oBAC/B,MAAM,CAAC,MAAM,CAAC,IAAI,2BAAY,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC,CAAC;gBAE7D,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAE7C,EAAE,CAAA,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC;oBACpB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM;oBACpB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBACrB,MAAM,CAAC,MAAM,CAAC,IAAI,2BAAY,CAAC,GAAG,EAAE,uBAAuB,CAAC,CAAC,CAAC;gBAElE,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC/B,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAE9B,OAAO,CAAC,KAAK,CAAC,CAAA;YAClB,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IACL,kBAAC;AAAD,CAAC,AAlCD,CAAiC,qBAAS,GAkCzC;AAlCY,mBAAW,cAkCvB,CAAA","sourcesContent":["import {RawDataProvider} from \"../data/RawDataProvider\";\nimport {Student} from \"../model/Student\";\nimport {ModelEdge} from \"./ModelEdge\";\nimport {ApiQueryScope} from \"../../../src/query/ApiQuery\";\nimport {ApiEdgeError} from \"../../../src/query/ApiEdgeError\";\n\nexport class StudentEdge extends ModelEdge<Student> {\n    name = \"student\";\n    pluralName = \"students\";\n\n    provider = RawDataProvider.students;\n    protected createModel = (obj: any): Student => new Student(obj);\n\n    constructor() {\n        super();\n\n        this.entryMethod(\"rename\", (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n            return new Promise((resolve, reject) => {\n                if(!scope.response)\n                    return reject(new ApiEdgeError(404, \"Not Found\"));\n\n                const entry = scope.response.data;\n\n                if(!scope.body || !scope.body.name)\n                    return reject(new ApiEdgeError(422, \"No Name Provided\"));\n\n                const nameParts = scope.body.name.split(' ');\n\n                if(nameParts.length != 2 ||\n                    !nameParts[0].length ||\n                    !nameParts[1].length)\n                    return reject(new ApiEdgeError(422, \"Invalid Name Provided\"));\n\n                entry.firstName = nameParts[0];\n                entry.lastName = nameParts[1];\n\n                resolve(scope)\n            })\n        })\n    }\n}\n"]}